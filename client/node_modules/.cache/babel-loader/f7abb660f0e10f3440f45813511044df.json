{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\My1\\\\Desktop\\\\BSE\\\\Blockchain\\\\TestTruffle\\\\frontClient\\\\client\\\\src\\\\App.js\";\nimport React, { Component } from \"react\"; // import SimpleStorageContract from \"./contracts/SimpleStorageContract.json\";\n\nimport SimpleStorage from \"./contracts/SimpleStorage.json\"; // import SimpleStorage from \"./contracts/SimpleStorage.sol\";\n\nimport getWeb3 from \"./getWeb3\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      storageValue: 0,\n      web3: null,\n      accounts: null,\n      contract: null\n    };\n\n    this.componentDidMount = async () => {\n      try {\n        // Get network provider and web3 instance.\n        const web3 = await getWeb3(); // Use web3 to get the user's accounts.\n\n        const accounts = await web3.eth.getAccounts(); // Get the contract instance.\n\n        const networkId = await web3.eth.net.getId();\n        console.log(networkId);\n        const deployedNetwork = SimpleStorage.networks[networkId].address;\n        const instance = new web3.eth.Contract(SimpleStorage.abi, deployedNetwork //&& deployedNetwork.address\n        );\n        console.log(instance); // Set web3, accounts, and contract to the state, and then proceed with an\n        // example of interacting with the contract's methods.\n\n        this.setState({\n          web3,\n          accounts,\n          contract: instance\n        }, this.runExample);\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(`Failed to load web3, accounts, or contract. Check console for details.`);\n        console.error(error);\n      }\n    };\n\n    this.runExample = async () => {\n      const {\n        accounts,\n        contract\n      } = this.state; // Stores a given value, 5 by default.\n\n      await contract.methods.set(5).send({\n        from: accounts[0]\n      }); // Get the value from the contract to prove it worked.\n\n      const response = await contract.methods.get().call(); // Update state with the result.\n\n      this.setState({\n        storageValue: response\n      });\n    };\n  }\n\n  render() {\n    if (!this.state.web3) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 14\n        }\n      }, \"Loading Web3, accounts, and contract...\");\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }\n    }, \"Good to Go!\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }\n    }, \"Your Truffle Box is installed and ready.\"), /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }\n    }, \"Smart Contract Example\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }\n    }, \"If your contracts compiled and migrated successfully, below will show a stored value of 5 (by default).\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }\n    }, \"Try changing the value stored on \", /*#__PURE__*/React.createElement(\"strong\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 44\n      }\n    }, \"line 40\"), \" of App.js.\"), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }\n    }, \"The stored value is: \", this.state.storageValue));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/My1/Desktop/BSE/Blockchain/TestTruffle/frontClient/client/src/App.js"],"names":["React","Component","SimpleStorage","getWeb3","App","state","storageValue","web3","accounts","contract","componentDidMount","eth","getAccounts","networkId","net","getId","console","log","deployedNetwork","networks","address","instance","Contract","abi","setState","runExample","error","alert","methods","set","send","from","response","get","call","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n// import SimpleStorageContract from \"./contracts/SimpleStorageContract.json\";\nimport SimpleStorage from \"./contracts/SimpleStorage.json\";\n// import SimpleStorage from \"./contracts/SimpleStorage.sol\";\nimport getWeb3 from \"./getWeb3\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  state = { storageValue: 0, web3: null, accounts: null, contract: null };\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      console.log(networkId);\n      const deployedNetwork = SimpleStorage.networks[networkId].address;\n      const instance = new web3.eth.Contract(\n        SimpleStorage.abi,\n        deployedNetwork //&& deployedNetwork.address\n      );\n      console.log(instance);\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, accounts, contract: instance }, this.runExample);\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`\n      );\n      console.error(error);\n    }\n  };\n\n  runExample = async () => {\n    const { accounts, contract } = this.state;\n\n    // Stores a given value, 5 by default.\n    await contract.methods.set(5).send({ from: accounts[0] });\n\n    // Get the value from the contract to prove it worked.\n    const response = await contract.methods.get().call();\n\n    // Update state with the result.\n    this.setState({ storageValue: response });\n  };\n\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div className=\"App\">\n        <h1>Good to Go!</h1>\n        <p>Your Truffle Box is installed and ready.</p>\n        <h2>Smart Contract Example</h2>\n        <p>\n          If your contracts compiled and migrated successfully, below will show\n          a stored value of 5 (by default).\n        </p>\n        <p>\n          Try changing the value stored on <strong>line 40</strong> of App.js.\n        </p>\n        <div>The stored value is: {this.state.storageValue}</div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}