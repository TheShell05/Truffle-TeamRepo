{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\My1\\\\Desktop\\\\BSE\\\\Blockchain\\\\TestTruffle\\\\frontClient\\\\client\\\\src\\\\App.js\";\nimport React, { Component } from \"react\";\nimport GreeterContract from \"./contracts/Greeter.json\";\nimport getWeb3 from \"./utils/getWeb3\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      greeting: '',\n      web3: null,\n      accounts: null,\n      contract: null\n    };\n\n    this.componentDidMount = async () => {\n      try {\n        // Get network provider and web3 instance.\n        const web3 = await getWeb3(); // Use web3 to get the user's accounts.\n\n        const accounts = await web3.eth.getAccounts(); // Get the contract instance.\n\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = GreeterContract.networks[networkId];\n        const instance = new web3.eth.Contract(GreeterContract.abi, deployedNetwork && deployedNetwork.address); // Set web3, accounts, and contract to the state, and then proceed with an\n        // example of interacting with the contract's methods.\n\n        this.setState({\n          web3,\n          accounts,\n          contract: instance\n        }, this.runExample);\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(`Failed to load web3, accounts, or contract. Check console for details.`);\n        console.error(error);\n      }\n    };\n\n    this.runExample = async () => {\n      const {\n        accounts,\n        contract\n      } = this.state;\n      const response = await contract.methods.greet().call();\n      this.setState({\n        greeting: response\n      });\n    };\n\n    this.handleGreetingChange = e => {\n      const inputVal = e.target.value;\n      this.setState({\n        greeting: inputVal\n      });\n    };\n\n    this.formSubmitHandler = async () => {\n      const {\n        accounts,\n        contract,\n        greeting\n      } = this.state;\n      const updatedGreeting = await contract.methods.setGreeting(greeting).send({\n        from: accounts[0]\n      });\n    };\n  }\n\n  render() {\n    if (!this.state.web3) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 14\n        }\n      }, \"Loading Web3, accounts, and contract...\");\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }\n    }, \"Greeter\"), this.state.greeting, /*#__PURE__*/React.createElement(\"form\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }\n    }, \"New Greeting:\", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      value: this.state.greeting,\n      onChange: e => this.handleGreetingChange(e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 13\n      }\n    }))), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.formSubmitHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }\n    }, \" Submit \"));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/My1/Desktop/BSE/Blockchain/TestTruffle/frontClient/client/src/App.js"],"names":["React","Component","GreeterContract","getWeb3","App","state","greeting","web3","accounts","contract","componentDidMount","eth","getAccounts","networkId","net","getId","deployedNetwork","networks","instance","Contract","abi","address","setState","runExample","error","alert","console","response","methods","greet","call","handleGreetingChange","e","inputVal","target","value","formSubmitHandler","updatedGreeting","setGreeting","send","from","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport GreeterContract from \"./contracts/Greeter.json\";\nimport getWeb3 from \"./utils/getWeb3\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  state = { greeting: '', web3: null, accounts: null, contract: null };\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = GreeterContract.networks[networkId];\n      const instance = new web3.eth.Contract(\n        GreeterContract.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, accounts, contract: instance }, this.runExample);\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  runExample = async () => {\n    const { accounts, contract } = this.state;\n    const response = await contract.methods.greet().call()\n\n    this.setState({ greeting: response });\n  };\n\n  handleGreetingChange = (e) => {\n    const inputVal = e.target.value\n    this.setState({ greeting: inputVal })\n  }\n\n  formSubmitHandler = async () => {\n    const { accounts, contract, greeting } = this.state;\n    const updatedGreeting = await contract.methods.setGreeting(greeting).send({from: accounts[0]});\n  }\n\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div className=\"App\">\n        <h1>Greeter</h1>\n\n        {this.state.greeting}\n\n        <form>\n          <label>\n            New Greeting:\n            <input type=\"text\" value={this.state.greeting} onChange={e => this.handleGreetingChange(e)} />\n          </label>\n        </form>\n\n        <button onClick={this.formSubmitHandler}> Submit </button>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}